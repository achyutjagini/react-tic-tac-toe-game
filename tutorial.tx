Next, you’ll want to change the value of a square from empty to “X”
when the user clicks on the square. With how you’ve built the board so 
far you would need to copy-paste the code that updates the square
nine times (once for each square you have)! Instead of copy-pasting,
React’s component architecture allows you to create a reusable component to
 avoid messy, duplicated code.

First, you are going to copy the line defining your first square (<button 
className="square">1</button>) from your Board component into a new
 Square component:

function Square() {
  return <button className="square">1</button>;
}

export default function Board() {
  // ...
}


Then you’ll update the Board component to render that
 Square component using JSX syntax:

// ...
export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
    </>
  );
}

Notice how unlike the browser divs, your own components Board and Square must 
start with a capital letter.

Let’s take a look:

Let’s fill the Square component with an X when you click it. Declare a function
called handleClick inside of the Square. Then, add onClick to the props of the
button JSX element returned from the Square component:

function Square({ value }) {
  function handleClick() {
    console.log('clicked!');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}


As a next step, you want the Square component to “remember” that it got clicked, 
and fill it with an “X” mark. To “remember” things, components use state.

React provides a special function called useState that you can call from 
your component to let it “remember” things. Let’s store the current value
 of the Square in state, and change it when the Square is clicked.

Import useState at the top of the file. Remove the value prop from the 
Square component. Instead, add a new line at the start of the Square
component that calls useState. Have it return a state variable called value:


Currently, each Square component maintains a part of the game’s state. To check for a winner 
in a tic-tac-toe game, the Board would need to somehow know the state of each of the 9 Square
' components.

How would you approach that? At first, you might guess that the Board needs to “ask”
each Square for that Square’s state. Although this approach is technically possible
in React, we discourage it because the code becomes difficult to understand, 
susceptible to bugs, and hard to refactor. Instead, the best approach is to 
store the game’s state in the parent Board component instead of in each Square. 
The Board component can tell each Square what to display by passing a prop, like you did when you passed a number to each Square.

To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with the parent component.

Lifting state into a parent component is common when React components are refactored.

Let’s take this opportunity to try it out. Edit the Board component so that it declares a state
variable named squares that defaults to an array of 9 nulls corresponding to the 9 squares


Next, you need to change what happens when a Square is clicked. The Board component now maintains which 
squares are filled. You’ll need to create a way for the Square to update
the Board’s state. Since state
is private to a component that defines it, you cannot update the
Board’s state directly from Square.


Instead, you’ll pass down a function from the Board component to the 
Square component, and 
you’ll have Square call that function when a square is clicked. You’ll start
with the function that the Square component will call when it is clicked. You’ll 
call that function onSquareClick:


The handleClick function creates a copy of the squares array (nextSquares) with the
JavaScript slice() Array method. Then, handleClick updates the nextSquares array 
to add X to the first ([0] index) square.

Calling the setSquares function lets React know the state of the component
has changed. This will trigger a re-render of the components that use the
squares state (Board) as well as its child components (the
Square components that make up the board).


The handleClick(0) call will be a part of rendering the board component. Because
handleClick(0) alters the state of the board component by calling setSquares,
your entire board component will be re-rendered again. But handleClick(0) is
now a part of rendering of the board component, and so you’ve created an 
infinite loop

If you mutated the squares array, implementing time travel would 
be very difficult.

However, you used slice() to create a new copy of the squares
array after every move, and treated it as immutable. This will 
allow you to store every past version of the squares array, and 
navigate between the turns that have already happened.

You’ll store the past squares arrays in another array called 
history, which you’ll store as a new state variable. The history
array represents all board states, from the first to the last
move, and has a shape like this.

[
  // Before first move
  [null, null, null, null, null, null, null, null, null],
  // After first move
  [null, null, null, null, 'X', null, null, null, null],
  // After second move
  [null, null, null, null, 'X', null, null, null, 'O'],
  // ...
]

You will now write a new top-level component called Game to 
display a list of past moves. That’s where you will place the
history state that contains the entire game history.

Placing the history state into the Game component will let you
remove the squares state from its child Board component. 
Just like you “lifted state up” from the Square component 
into the Board component, you will now lift it up from
the Board into the top-level Game component. This gives
the Game component full control over the Board’s data
and lets it instruct the Board to render 
previous turns from the history.

add a Game component with export default. Have it render
the Board component inside some markup.

export default function Game() {
  return (
    <div className="game">

      <div className="game-board">
        <Board />
      </div>

      <div className="game-info">
        <ol>{/*TODO*/}</ol>
      </div>

    </div>
  );
}

Note that you are removing the export default keywords before
the function Board() { declaration and adding them before
the function Game() { declaration. This tells your index.js
file to use the Game component as the top-level component
instead of your Board component. The additional divs returned 
by the Game component are making room for the game information 
you’ll add to the board later.


Add some state to the Game component to track which player is
next and the history of moves:

export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  // ...

Notice how [Array(9).fill(null)] is an array with a single item, 
which itself is an array of 9 nulls.

To render the squares for the current move, you’ll want to
read the last squares array from the history. You don’t 
need useState for this—you already have enough information
to calculate it during rendering:

export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const currentSquares = history[history.length - 1];
  // ...

